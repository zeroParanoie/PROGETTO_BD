-- MySQL Script generated by MySQL Workbench
-- Mon Jan 29 18:37:27 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema ingrossoPiante
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ingrossoPiante
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ingrossoPiante` DEFAULT CHARACTER SET utf8 COLLATE utf8_czech_ci ;
USE `ingrossoPiante` ;

-- -----------------------------------------------------
-- Table `ingrossoPiante`.`contatto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`contatto` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`contatto` (
  `email` VARCHAR(45) NOT NULL,
  `IVArivenditaContatto` VARCHAR(11) NOT NULL,
  `telefono` VARCHAR(9) NULL,
  `cellulare` VARCHAR(10) NULL,
  PRIMARY KEY (`email`, `IVArivenditaContatto`),
  UNIQUE INDEX `telefono_UNIQUE` (`telefono` ASC) VISIBLE,
  UNIQUE INDEX `cellulare_UNIQUE` (`cellulare` ASC) VISIBLE,
  INDEX `fkContatto_idx` (`IVArivenditaContatto` ASC) VISIBLE,
  CONSTRAINT `fkContatto`
    FOREIGN KEY (`IVArivenditaContatto`)
    REFERENCES `ingrossoPiante`.`rivendita` (`IVA`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`contenuto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`contenuto` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`contenuto` (
  `CodOrdineCont` INT NOT NULL,
  `nomeLatinoSpecieCont` VARCHAR(45) NOT NULL,
  `qta_ordinata` INT NOT NULL,
  PRIMARY KEY (`CodOrdineCont`, `nomeLatinoSpecieCont`),
  INDEX `fkSpecie_idx` (`nomeLatinoSpecieCont` ASC) VISIBLE,
  CONSTRAINT `fkOrdine`
    FOREIGN KEY (`CodOrdineCont`)
    REFERENCES `ingrossoPiante`.`ordine` (`Codice_ordine`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fkSpecie`
    FOREIGN KEY (`nomeLatinoSpecieCont`)
    REFERENCES `ingrossoPiante`.`specie` (`nome_latino`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`effettua`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`effettua` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`effettua` (
  `IVAeff` VARCHAR(11) NOT NULL,
  `codOrdineEff` INT NOT NULL,
  PRIMARY KEY (`IVAeff`, `codOrdineEff`),
  INDEX `fkOrdine_idx` (`codOrdineEff` ASC) VISIBLE,
  CONSTRAINT `fkRivendita`
    FOREIGN KEY (`IVAeff`)
    REFERENCES `ingrossoPiante`.`rivendita` (`IVA`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fkOrdine2`
    FOREIGN KEY (`codOrdineEff`)
    REFERENCES `ingrossoPiante`.`ordine` (`Codice_ordine`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`fornitore`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`fornitore` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`fornitore` (
  `CF` VARCHAR(16) NOT NULL,
  `nomeFornitore` VARCHAR(45) NOT NULL,
  `cognomeFornitore` VARCHAR(45) NOT NULL,
  `Cfornitore` INT NOT NULL,
  `sedePos` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`CF`),
  UNIQUE INDEX `Cfornitore_idx` (`Cfornitore` ASC) VISIBLE,
  UNIQUE INDEX `sedePos_idx` (`sedePos` ASC) VISIBLE,
  CONSTRAINT `fkFornitrice`
    FOREIGN KEY (`Cfornitore`)
    REFERENCES `ingrossoPiante`.`fornitrice` (`Codice_fornitore`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`fornitrice`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`fornitrice` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`fornitrice` (
  `Codice_fornitore` INT NOT NULL AUTO_INCREMENT,
  `sede_f` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Codice_fornitore`),
  UNIQUE INDEX `sede_f_UNIQUE` (`sede_f` ASC) VISIBLE,
  CONSTRAINT `fkSede`
    FOREIGN KEY (`sede_f`)
    REFERENCES `ingrossoPiante`.`sede` (`sede_a`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`indirizzo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`indirizzo` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`indirizzo` (
  `fatturazione` VARCHAR(45) NOT NULL,
  `IVArivendita` VARCHAR(11) NOT NULL,
  `spedizione` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`fatturazione`, `IVArivendita`),
  INDEX `fkRivendita_idx` (`IVArivendita` ASC) VISIBLE,
  CONSTRAINT `fkRivendita2`
    FOREIGN KEY (`IVArivendita`)
    REFERENCES `ingrossoPiante`.`rivendita` (`IVA`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`ordine`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`ordine` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`ordine` (
  `Codice_ordine` INT NOT NULL AUTO_INCREMENT,
  `recapito` VARCHAR(45) NOT NULL,
  `nomeOrdine` VARCHAR(45) NOT NULL,
  `cognomeOrdine` VARCHAR(45) NULL,
  `stato` ENUM('aperto', 'finalizzato', 'in consegna', 'consegnato') NOT NULL,
  PRIMARY KEY (`Codice_ordine`),
  INDEX `nomeOrdine_idx` (`cognomeOrdine` ASC) VISIBLE,
  INDEX `cognomeOrdine_udx` (`cognomeOrdine` ASC) VISIBLE,
  INDEX `ordine_info` (`stato` ASC, `recapito` ASC) VISIBLE,
  CONSTRAINT `fkNome`
    FOREIGN KEY (`cognomeOrdine`)
    REFERENCES `ingrossoPiante`.`referente` (`cognomeReferente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`pianta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`pianta` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`pianta` (
  `codice` INT NOT NULL AUTO_INCREMENT,
  `nomeLatinoSpeciePianta` VARCHAR(45) NOT NULL,
  `quantita` INT NOT NULL,
  PRIMARY KEY (`codice`, `nomeLatinoSpeciePianta`),
  INDEX `fkSpecie_idx` (`nomeLatinoSpeciePianta` ASC) VISIBLE,
  CONSTRAINT `fkSpecie2`
    FOREIGN KEY (`nomeLatinoSpeciePianta`)
    REFERENCES `ingrossoPiante`.`specie` (`nome_latino`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`prezzo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`prezzo` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`prezzo` (
  `costo` FLOAT NOT NULL,
  `nomeLatinoSpeciePrezzo` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`costo`, `nomeLatinoSpeciePrezzo`),
  INDEX `fkSpecie_idx` (`nomeLatinoSpeciePrezzo` ASC) VISIBLE,
  CONSTRAINT `fkSpecie3`
    FOREIGN KEY (`nomeLatinoSpeciePrezzo`)
    REFERENCES `ingrossoPiante`.`specie` (`nome_latino`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`referente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`referente` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`referente` (
  `cognomeReferente` VARCHAR(45) NOT NULL,
  `IVArivenditaReferente` VARCHAR(11) NOT NULL,
  `nomeReferente` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`cognomeReferente`, `IVArivenditaReferente`),
  INDEX `fkRivendita_idx` (`IVArivenditaReferente` ASC) VISIBLE,
  CONSTRAINT `fkRivendita4`
    FOREIGN KEY (`IVArivenditaReferente`)
    REFERENCES `ingrossoPiante`.`rivendita` (`IVA`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`rifornisce`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`rifornisce` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`rifornisce` (
  `codFornitriceRif` VARCHAR(10) NOT NULL,
  `codicePiantaRif` INT NOT NULL,
  `specieRif` VARCHAR(45) NOT NULL,
  `qtaFornitura` INT NOT NULL,
  `accetttata` ENUM('yes', 'no') NOT NULL,
  PRIMARY KEY (`codFornitriceRif`, `codicePiantaRif`, `specieRif`),
  INDEX `fkPianta_idx` (`codicePiantaRif` ASC) VISIBLE,
  CONSTRAINT `fkFornitore`
    FOREIGN KEY (`codFornitriceRif`)
    REFERENCES `ingrossoPiante`.`fornitore` (`CF`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fkPianta`
    FOREIGN KEY (`codicePiantaRif`)
    REFERENCES `ingrossoPiante`.`pianta` (`codice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`rivendita`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`rivendita` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`rivendita` (
  `IVA` VARCHAR(11) NOT NULL,
  `sede_rivendita` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`IVA`),
  UNIQUE INDEX `sede_rivendita_idx` (`sede_rivendita` ASC) INVISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`sede`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`sede` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`sede` (
  `sede_a` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`sede_a`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`specie`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`specie` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`specie` (
  `nome_latino` VARCHAR(45) NOT NULL,
  `nome_comune` VARCHAR(45) NOT NULL,
  `colore` VARCHAR(45) NULL,
  `dataAggPrezzo` DATETIME NOT NULL,
  `tipoGenetica` ENUM('fio', 'ext', 'eso') NOT NULL,
  PRIMARY KEY (`nome_latino`),
  INDEX `tipoGenetica_idx` (`tipoGenetica` ASC) VISIBLE,
  CONSTRAINT `fkTipo`
    FOREIGN KEY (`tipoGenetica`)
    REFERENCES `ingrossoPiante`.`tipo` (`tipo_a`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`tipo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`tipo` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`tipo` (
  `tipo_a` ENUM('fio', 'ext', 'eso') NOT NULL,
  PRIMARY KEY (`tipo_a`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ingrossoPiante`.`utente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ingrossoPiante`.`utente` ;

CREATE TABLE IF NOT EXISTS `ingrossoPiante`.`utente` (
  `username` VARCHAR(45) NOT NULL,
  `pw` VARCHAR(45) NOT NULL,
  `ruolo` ENUM('v', 'f', 'r') NOT NULL,
  PRIMARY KEY (`username`))
ENGINE = InnoDB;

USE `ingrossoPiante` ;

-- -----------------------------------------------------
-- procedure login
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`login`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `login` (in var_username VARCHAR(45), in var_pass VARCHAR(45), out var_role int)
BEGIN
	declare var_user_role enum('v', 'f', 'r');
    select ruolo from utente where username = var_username and pw = md5(var_pass) into var_user_role;
    
    if var_user_role = 'v' then
		set var_role = 1;
	elseif var_user_role = 'f' then
		set var_role = 2;
	elseif var_user_role = 'r' then
		set var_role = 3;
	end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_f_sedi
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`update_f_sedi`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `update_f_sedi` (in new_sede VARCHAR(45), in cforn INT)
BEGIN
	update fornitrice set sede_f = new_sede where Codice_fornitore = cforn;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure aggiungi_piante_ordinate
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`aggiungi_piante_ordinate`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `aggiungi_piante_ordinate` (in newPiantaCodice INT, in qta_aggiunta INT)
BEGIN
	update pianta set quantita = quantita + qta_aggiunta where codice = newPiantaCodice;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ordina_piante_aggiungi
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`ordina_piante_aggiungi`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `ordina_piante_aggiungi` (in var_nomeL VARCHAR(45), in var_qta INT, in var_nomeRef VARCHAR(45), in var_cognomeRef VARCHAR(45), in var_recapito VARCHAR(45))
BEGIN
	declare qtaDisp INT;
	declare exit handler for sqlexception
    begin
		rollback;
        resignal;
    end;
    
    select quantita from pianta where nomeLatinoSpeciePianta = var_nomeL into qtaDisp;
    
	set transaction isolation level READ COMMITTED;
    start transaction;
		if qtaDisp < var_qta then
			signal sqlstate '45001' set message_text = 'quantita non disponibile!';
		end if;
        
        if not exists(select * from ordine where Codice_ordine = md5(var_recapito)) then
			insert into ordine values(md5(var_recapito), var_recapito, var_nomeRef, var_cognomeRef, 'aperto');
        end if;
        
        if not exists(select * from contenuto where nomeLatinoSpecieCont = var_nomeL and CodOrdineCont = md5(var_recapito)) then
			insert into contenuto values(md5(var_recapito), var_nomeL, var_qta);
		else
			update contenuto set qta_ordinata = qta_ordinata + var_qta where nomeLatinoSpecieCont = var_nomeL and CodOrdineCont = md5(var_recapito);
		end if;
	commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_sede_rivendita
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`update_sede_rivendita`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `update_sede_rivendita` (in var_ivaRivendita VARCHAR(11), in var_newInd VARCHAR(45))
BEGIN
	update indirizzo set spedizione = var_newInd where IVArivendita = var_ivaRivendita;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure modifica_prezzo
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`modifica_prezzo`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `modifica_prezzo` (in var_nomeSpecie VARCHAR(45), in var_nuovoPrezzo FLOAT)
BEGIN
	insert into prezzo values(var_nomeSpecie, var_nuovoPrezzo);
    update specie set dataAggPrezzo = getdate() where specie = var_nomeSpecie;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure aggiungi_contatto
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`aggiungi_contatto`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `aggiungi_contatto` (in var_email VARCHAR(45), in var_IVA VARCHAR(11), in var_telefono VARCHAR(9), in var_cellulare VARCHAR(10))
BEGIN
	insert into contatto values(var_email, var_IVA, var_telefono, var_cellulare);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure trova_info_rivendita
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`trova_info_rivendita`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `trova_info_rivendita` (in var_IVA VARCHAR(10), out var_sede VARCHAR(45), out var_email VARCHAR(45), out var_telefono VARCHAR(9), out var_cellulare VARCHAR(10), out var_nome VARCHAR(45), out var_cognome VARCHAR(45))
BEGIN
	select sede_f from rivendita where IVA = var_IVA into var_sede;
    select nomeReferente, cognomeReferente from referente where IVArivenditaReferente = var_IVA into var_nome, var_cognome;
    select email, telefono, cellulare from contatto where IVArivenditaContatto = var_IVA into var_email, var_telefono, var_cellulare;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure trova_info_fornitrice
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`trova_info_fornitrice`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `trova_info_fornitrice` (in var_CF VARCHAR(10), out var_sede VARCHAR(45), out var_nome VARCHAR(45), out var_cognome VARCHAR(45))
BEGIN
	select sede_f from fornitrice where Codice_fornitore = var_CF into var_sede;
    select nomeFornitore, cognomeFornitore from fornitore where Cfornitore = var_CF into var_nome, var_cognome;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure trova_info_ordine
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`trova_info_ordine`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `trova_info_ordine` (in var_cod INT, out var_stato ENUM('aperto', 'finalizzato', 'in consegna', 'consegnato'))
BEGIN
	select stato from ordine where Codice_ordine = var_cod into var_stato;
END$$

DELIMITER ;


-- -----------------------------------------------------
-- procedure aggiungi_specie
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`aggiungi_specie`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `aggiungi_specie` (in var_nomeL VARCHAR(45), in var_nomeC VARCHAR(45), in var_colore VARCHAR(45), in var_prezzo FLOAT, in var_genetica ENUM('fio', 'ext', 'eso'))
BEGIN
	insert into specie values(var_nomeL, var_nomeC, var_colore, GETDATE(), var_genetica);
    insert into pianta values(md5(var_nomeL), var_nomeL, 10);
    insert into prezzo values(var_prezzo, var_nomeL);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure aggiungi_fornitore
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`aggiungi_fornitore`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `aggiungi_fornitore` (in var_nome VARCHAR(45), in var_cognome VARCHAR(45), in var_CF VARCHAR(16), in var_sede VARCHAR(45), in var_CodF INT)
BEGIN
	declare vecchieSedi VARCHAR(45);
    select sedePos from fornitore into vecchieSedi;
	insert into fornitore values(var_CF, var_nome, var_cognome, var_CodF, concat(vecchieSedi, concat(' ', var_sede)));
    insert into fornitrice values(var_Codf, var_sede);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure trova_ultimo_prezzo
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`trova_ultimo_prezzo`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `trova_ultimo_prezzo` (in var_nomeL VARCHAR(45))
BEGIN
	select costo from prezzo where nome_latino = var_nomeL;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_ordine_finalizzato
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`update_ordine_finalizzato`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `update_ordine_finalizzato` (in codOrdine INT)
BEGIN
	update ordine set stato = 'finalizzato' where Codice_ordine = codOrdine;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure trova_rivendite
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`trova_rivendite`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `trova_rivendite` ()
BEGIN
	select * from rivendita;
    select * from referenti;
    select * from contatti;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure trova_fornitori
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`trova_fornitori`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `trova_fornitori` ()
BEGIN
	select * from fornitore;
    select * from fornitrice;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure aggiungi_utente
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`aggiungi_utente`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `aggiungi_utente` (in var_usrn VARCHAR(45), in var_pw VARCHAR(45), in var_ruolo ENUM('v', 'f', 'r'))
BEGIN
	insert into utente values(var_usrn, var_pw, var_ruolo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure accetta_fornitura
-- -----------------------------------------------------

USE `ingrossoPiante`;
DROP procedure IF EXISTS `ingrossoPiante`.`accetta_fornitura`;

DELIMITER $$
USE `ingrossoPiante`$$
CREATE PROCEDURE `accetta_fornitura` (in var_specie VARCHAR(45), in var_cForn INT)
BEGIN
	update rifornisce set accettata = 'yes' where specieRif = var_specie and codFornitriceRif = var_Cforn; 
END$$

DELIMITER ;
USE `ingrossoPiante`;

DELIMITER $$

USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`contatto_BEFORE_INSERT` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`contatto_BEFORE_INSERT` BEFORE INSERT ON `contatto` FOR EACH ROW
BEGIN
	if not NEW.email regexp '^[A-Za-z0-9+_.-]+@(.+)$' then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`contatto_BEFORE_INSERT_1` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`contatto_BEFORE_INSERT_1` BEFORE INSERT ON `contatto` FOR EACH ROW
BEGIN
	if not NEW.telefono regexp '^[0-9]{4,15}$' then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`contatto_BEFORE_INSERT_2` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`contatto_BEFORE_INSERT_2` BEFORE INSERT ON `contatto` FOR EACH ROW
BEGIN
	if not NEW.telefono regexp '^[0-9]{4,16}$' then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`contatto_BEFORE_UPDATE` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`contatto_BEFORE_UPDATE` BEFORE UPDATE ON `contatto` FOR EACH ROW
BEGIN
	if not NEW.email regexp '^[A-Za-z0-9+_.-]+@(.+)$' then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`contatto_BEFORE_UPDATE_1` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`contatto_BEFORE_UPDATE_1` BEFORE UPDATE ON `contatto` FOR EACH ROW
BEGIN
	if not NEW.telefono regexp '^[0-9]{4,15}$' then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`contatto_BEFORE_UPDATE_2` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`contatto_BEFORE_UPDATE_2` BEFORE UPDATE ON `contatto` FOR EACH ROW
BEGIN
	if not NEW.telefono regexp '^[0-9]{4,16}$' then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`contenuto_BEFORE_INSERT` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`contenuto_BEFORE_INSERT` BEFORE INSERT ON `contenuto` FOR EACH ROW 
BEGIN
	DECLARE piantaOrdinata VARCHAR(45);
    SELECT nomeLatinoSpeciePianta FROM pianta WHERE NEW.nomeLatinoSpecieCont = nomeLatinoSpeciePianta INTO piantaOrdinata;
	if (NEW.qta_ordinata > (SELECT quantita FROM pianta WHERE piantaOrdinata = nomeLatinoSpeciePianta)) then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`fornitore_BEFORE_INSERT` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`fornitore_BEFORE_INSERT` BEFORE INSERT ON `fornitore` FOR EACH ROW
BEGIN
	if not NEW.CF regexp '^[A-Z]{6,6}[0-9]{2,2}[A-Z][0-9]{2,2}[A-Z][0-9]{3,3}[A-Z]$' then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`fornitrice_BEFORE_INSERT` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`fornitrice_BEFORE_INSERT` BEFORE INSERT ON `fornitrice` FOR EACH ROW
BEGIN
	if not NEW.Codice_fornitore regexp '^[A-Za-z0-9]+$' then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`ordine_BEFORE_INSERT` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`ordine_BEFORE_INSERT` BEFORE INSERT ON `ordine` FOR EACH ROW
BEGIN
	if not NEW.Codice_ordine regexp '^[A-Za-z0-9]+$' then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`ordine_BEFORE_INSERT_1` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`ordine_BEFORE_INSERT_1` BEFORE INSERT ON `ordine` FOR EACH ROW
BEGIN
	if (NEW.stato != 'aperto$') then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`ordine_BEFORE_UPDATE` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`ordine_BEFORE_UPDATE` BEFORE UPDATE ON `ordine` FOR EACH ROW
BEGIN
	if (NEW.stato != 'aperto$' and NEW.stato != 'finalizzato$' and NEW.stato != 'in consegna$' and NEW.stato != 'consegnato$') then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`pianta_BEFORE_INSERT` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`pianta_BEFORE_INSERT` BEFORE INSERT ON `pianta` FOR EACH ROW
BEGIN
	if not NEW.codice regexp '^[A-Za-z0-9]+$' then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`pianta_AFTER_UPDATE` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`pianta_AFTER_UPDATE` AFTER UPDATE ON `pianta` FOR EACH ROW
BEGIN
    declare codFornRiforn VARCHAR(10);
    
    select codFornitriceRif from rifornisce where specieRif = NEW.nomeLatinoSpeciePianta into codFornRiforn;
    
    if NEW.quantita < 5 then
		insert into rifornisce values(codFornRiforn, NEW.codice, NEW.nomeLatinoSpeciePianta, 10);
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`prezzo_AFTER_INSERT` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`prezzo_AFTER_INSERT` AFTER INSERT ON `prezzo` FOR EACH ROW
BEGIN
	UPDATE specie SET dataAggPrezzo = GETDATE() WHERE NEW.nomeLatinoSpeciePrezzo = nome_latino;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`rifornisce_AFTER_UPDATE` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`rifornisce_AFTER_UPDATE` AFTER UPDATE ON `rifornisce` FOR EACH ROW
BEGIN
	update pianta set quantita = quantita + qta_fornitura where codice = codicePiantaRif;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`rivendita_BEFORE_INSERT` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`rivendita_BEFORE_INSERT` BEFORE INSERT ON `rivendita` FOR EACH ROW
BEGIN
	if not NEW.IVA regexp '^[0-9]{11}$' then
		signal sqlstate '45000';
	end if;
END$$


USE `ingrossoPiante`$$
DROP TRIGGER IF EXISTS `ingrossoPiante`.`rivendita_BEFORE_UPDATE` $$
USE `ingrossoPiante`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ingrossoPiante`.`rivendita_BEFORE_UPDATE` BEFORE UPDATE ON `rivendita` FOR EACH ROW
BEGIN
	if not NEW.IVA regexp '^[0-9]{11}$' then
		signal sqlstate '45000';
	end if;
END$$


DELIMITER ;
SET SQL_MODE = '';
DROP USER IF EXISTS login;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'login' IDENTIFIED BY 'Andrea44!';
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`login` TO `login`;

SET SQL_MODE = '';
DROP USER IF EXISTS fornitore_user;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'fornitore_user' IDENTIFIED BY 'Andrea44!';
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`accetta_fornitura` TO `fornitore_user`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`update_f_sedi` TO `fornitore_user`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`aggiungi_utente` TO `fornitore_user`;

SET SQL_MODE = '';
DROP USER IF EXISTS referente_user;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'referente_user' IDENTIFIED BY 'Andrea44!';
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`aggiungi_contatto` TO `referente_user`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`ordina_piante_aggiungi` TO `referente_user`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`trova_info_ordine` TO `referente_user`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`trova_info_rivendita` TO `referente_user`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`trova_ultimo_prezzo` TO `referente_user`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`update_ordine_finalizzato` TO `referente_user`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`update_sede_rivendita` TO `referente_user`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`aggiungi_utente` TO `referente_user`;

SET SQL_MODE = '';
DROP USER IF EXISTS magazzino;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'magazzino' IDENTIFIED BY 'Andrea44!';
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`aggiungi_fornitore` TO `magazzino`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`modifica_prezzo` TO `magazzino`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`trova_fornitori` TO `magazzino`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`trova_info_fornitrice` TO `magazzino`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`trova_info_ordine` TO `magazzino`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`trova_rivendite` TO `magazzino`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`trova_ultimo_prezzo` TO `magazzino`;
GRANT EXECUTE ON PROCEDURE `ingrossoPiante`.`aggiungi_utente` TO `magazzino`;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
